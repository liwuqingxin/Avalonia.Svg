using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Nlnet.Avalonia.Svg.CompileGenerator
{
    [Generator]
    public class SvgTagFactoryGenerator : ISourceGenerator
    {
        // 语法接收器，将在每次生成代码时被按需创建
        private class SyntaxReceiver : ISyntaxReceiver
        {
            public List<ClassDeclarationSyntax> CandidateClasses { get; } = new List<ClassDeclarationSyntax>();

            // 编译中在访问每个语法节点时被调用，我们可以检查节点并保存任何对生成有用的信息
            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                // 将具有至少一个 Attribute 的任何接口作为候选
                if (syntaxNode is ClassDeclarationSyntax classDeclarationSyntax && classDeclarationSyntax.AttributeLists.Count > 0)
                {
                    CandidateClasses.Add(classDeclarationSyntax);
                }
            }
        }

        // ReSharper disable once InconsistentNaming
        private const string TagFactoryGeneratorAttributeCsFileName       = "TagFactoryGeneratorAttribute.g.cs";
        private const string TagFactoryGeneratorAttributeFullName         = "Nlnet.Avalonia.Svg.CompileGenerator.TagFactoryGeneratorAttribute";
        private const string TagFactoryGeneratorAttributeParserMethodName = "ParserMethodName";
        private const string TagFactoryGeneratorAttributeText = @"// <auto-generated/>
using System;

namespace Nlnet.Avalonia.Svg.CompileGenerator
{
    /// <summary>
    /// Mark the tag should auto generate factory.
    /// </summary>
    /// <returns></returns>
    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    internal sealed class TagFactoryGeneratorAttribute : Attribute
    {
        public string TagName { get; set; }

        public bool AutoGenerate { get; set; }

        public TagFactoryGeneratorAttribute(string tagName, bool autoGenerate = true)
        {
            TagName = tagName;
            AutoGenerate = autoGenerate;
        }
    }
}";

        public void Initialize(GeneratorInitializationContext context)
        {
            //Debugger.Launch();

            // 注册一个语法接收器，会在每次生成时被创建
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // 添加 Attribute 文本
            context.AddSource(TagFactoryGeneratorAttributeCsFileName, SourceText.From(TagFactoryGeneratorAttributeText, Encoding.UTF8));

            // 获取先前的语法接收器 
            if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
            {
                return;
            }

            if (!(context.Compilation is CSharpCompilation csharpCompilation))
            {
                throw new Exception($"{nameof(SvgTagFactoryGenerator)} only support C#.");
            }

            // 创建处目标名称的属性
            var options     = csharpCompilation.SyntaxTrees[0].Options as CSharpParseOptions;
            var compilation = context.Compilation.AddSyntaxTrees(CSharpSyntaxTree.ParseText(SourceText.From(TagFactoryGeneratorAttributeText, Encoding.UTF8), options));

            // 获取新绑定的 Attribute
            var attributeSymbol = compilation.GetTypeByMetadataName(TagFactoryGeneratorAttributeFullName);
            if (attributeSymbol == null)
            {
                throw new Exception($"Can not find the {TagFactoryGeneratorAttributeFullName}");
            }

            // 遍历候选接口，只保留有 TagFactoryGeneratorAttribute 标注的接口
            foreach (var @class in receiver.CandidateClasses)
            {
                var model         = compilation.GetSemanticModel(@class.SyntaxTree);
                var typeSymbol    = model.GetDeclaredSymbol(@class);
                var attributeData = typeSymbol?.GetAttributes().FirstOrDefault(attr => attributeSymbol.Equals(attr.AttributeClass, SymbolEqualityComparer.Default));
                if (attributeData == null || attributeData.ConstructorArguments.Length < 2)
                {
                    continue;
                }

                var source = GenerateTagFactory(typeSymbol, attributeData);
                if (string.IsNullOrEmpty(source))
                {
                    continue;
                }
                context.AddSource($"I{typeSymbol.Name}Factory.g.cs", SourceText.From(source, Encoding.UTF8));
            }
        }

        private static string GenerateTagFactory(ISymbol classSymbol, AttributeData attributeData)
        {
            if (!classSymbol.ContainingSymbol.Equals(classSymbol.ContainingNamespace, SymbolEqualityComparer.Default))
            {
                // 必须在顶层，产生诊断信息
                return null;
            }

            var namespaceName    = classSymbol.ContainingNamespace.ToDisplayString();
            var tagClassName     = classSymbol.Name;
            var tagName          = attributeData.ConstructorArguments[0].Value?.ToString();
            var autoGenerate     = attributeData.ConstructorArguments[1].Value?.ToString();

            if (autoGenerate == false.ToString())
            {
                return string.Empty;
            }

            // 开始构建要生成的代码
            var source = new StringBuilder($@"// <auto-generated/>
using System;
using System.Xml;

#nullable enable

namespace Nlnet.Avalonia.Svg;

/// <summary>
/// Factory for <see cref=""{tagClassName}""/>
/// </summary>
/// <returns></returns>
[SvgTag(SvgTags.{tagName})]
public class {tagClassName}Factory : ISvgTagFactory
{{
    public ISvgTag CreateTag(XmlNode xmlNode)
    {{
        var tag = new {tagClassName}();
        tag.FetchPropertiesFrom(xmlNode.Attributes);
        tag.OnPropertiesFetched();
        return tag;
    }}
}}");

            return source.ToString();
        }

        private static string Capitalize(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return s;
            }

            return s[0].ToString().ToUpper() + s.Substring(1);
        }
    }
}
